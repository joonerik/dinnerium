@startuml class_diagram



package dinnerium.restapi{
    class IngredientService {
        - ObjectMapper MAPPER
        - UserService USERSERVICE
        - <u> Logger LOGGER
        --
        + String addIngredient(String, String)
    }

    class RecipeService {
        - ObjectMapper MAPPER
        - UserService USERSERVICE
        - <u> Logger LOGGER
        --
        + String addRecipe(String, String)
    }

    class UserService {
        - ObjectMapper MAPPER
        - HandlePersistency HANDLEPERSISTENCY
        - <u> Logger LOGGER
        --
        + String registerUser(String)
        + String addIngredient(Ingredient, String)
        + String addRecipe(Recipe, String)
        - void saveUser(User)
    }

    class RestServer {
        - <u> Logger LOGGER
        --
        + void <u> main(String[])
    }
}
package dinnerium.ui {


class UserProvider<<FC>>{
    + state: IUser | null user
    + props: children
    --
    void updateUser(IUser user | null)
    void logOut()
}
class App<<FC>>{    
}
class LoginPage<<FC>>{  
    state: String name
    state: register | login  isAction 
    --
    void submitForm(event: React.FormEvent<HTMLFormElement>, action: 'register' | 'login')
    void checkValidity(event: React.ChangeEvent<HTMLInputElement>)
}
class NavBar<<FC>>{}

class FridgePage<<FC>>{
} 
class Menu<<FC>>{
    void  postIngredient(event: React.FormEvent<HTMLFormElement>)
}
interface IItem{
    Ingredient item
}
class Item<<FC<IItem>>> implements IItem{}
interface IAddIngredient{
    void submitIngredientForm (event: React.FormEvent<HTMLFormElement>)
}
class AddIngredient<<FC<IAddIngredient>> implements IAddIngredient{
    state: Array<String> isUnits
    --
    void useEffect((),[])
    void checkValidity (event: React.ChangeEvent<HTMLInputElement>)
}
class RecipePage<<FC>>{}

class RecipeBoxComponent<<FC>>{
    state: Recipe recipe
    --
    void displayRecipeMetadata(index: number)
}
class NewRecipe<<FC>>{
    state: String[] instructions
    state: Ingredient[] ingredients
    --
    void addInstruction(e: React.FormEvent<HTMLFormElement>)
    void removeInstruction(index: number)
    void addIngredient(e: React.FormEvent<HTMLFormElement>)
    void removeIngredient(index: number)
    void submitNewRecipeForm(e: React.FormEvent<HTMLFormElement>)
}
interface ISideBar{
    Metadata recipeMetadata?
    Array<String> recipeInstructions?
    Array<Ingredient> recipeIngredients?
    boolean isEmpty

}
class RecipeSideBar<<FC<ISideBar>>> implements ISideBar{}

class SettingsPage<<FC>>{
    --
    void handleLogout()
}

}
UserProvider --> App
App --> LoginPage
App --> NavBar
App --> RecipePage
RecipePage --> RecipeBoxComponent
RecipePage --> NewRecipe
NewRecipe --> RecipeSideBar
RecipeBoxComponent --> RecipeSideBar
NewRecipe --> AddIngredient
App --> FridgePage
FridgePage --> Menu
Menu --> AddIngredient
Menu --> Item
App -->  SettingsPage
UserService ..> UserProvider: <<uses>>
@enduml